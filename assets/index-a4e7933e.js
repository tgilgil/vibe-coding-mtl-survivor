(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();class g extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s){super(e,t,s,"player"),this.scene=e,this.health=100,this.maxHealth=100,this.xp=0,this.displayXP=0,this.level=1,this.speed=200,this.lastAttackTime=0,this.attackCooldown=500,this.projectileDamage=1,this.xpMultiplier=1,this.hasAura=!1,this.auraRadius=50,this.auraDamage=1,this.auraDamageInterval=500,this.lastAuraDamageTime=0,this.auraGraphics=e.add.graphics(),this.updateAuraVisual(),this.hasStasis=!1,this.stasisRadius=200,this.stasisDuration=5e3,this.stasisCooldown=4e3,this.lastStasisTime=0,this.activeStasis=null,this.stasisGraphics=e.add.graphics(),e.add.existing(this),e.physics.add.existing(this),this.setCircle(20),this.setCollideWorldBounds(!0),this.body.enable=!0,this.body.setAllowGravity(!1),this.body.setImmovable(!1),this.body.setBounce(0)}takeDamage(e){this.health=Math.max(0,this.health-e),this.health<=0&&this.scene.gameOver(),this.scene.updateUI()}gainXP(e){this.xp+=e*this.xpMultiplier,this.xp>=this.level*100&&this.levelUp(),this.scene.updateUI()}levelUp(){this.level++,this.xp=0,this.displayXP=0,this.scene.showUpgradeOptions()}updateAuraVisual(){this.auraGraphics.clear(),this.hasAura&&(this.auraGraphics.lineStyle(2,5025616,.3),this.auraGraphics.fillStyle(5025616,.1),this.auraGraphics.strokeCircle(this.x,this.y,this.auraRadius),this.auraGraphics.fillCircle(this.x,this.y,this.auraRadius))}applyUpgrade(e,t){switch(e){case"damage":this.projectileDamage+=t;break;case"attackSpeed":this.attackCooldown=Math.max(100,this.attackCooldown-t);break;case"health":this.maxHealth+=t,this.health=this.maxHealth;break;case"xpGain":this.xpMultiplier+=t;break;case"aura":this.hasAura?(this.auraRadius+=t.radius||0,this.auraDamage+=t.damage||0):this.hasAura=!0;break;case"stasis":this.hasStasis?(this.stasisRadius+=t.radius||0,this.stasisDuration+=t.duration||0):this.hasStasis=!0;break}this.scene.resumeGame()}updateDisplayXP(){const e=this.xp-this.displayXP;Math.abs(e)<.1?this.displayXP=this.xp:this.displayXP+=e*.1}createStasis(){if(!this.hasStasis)return;const e=this.scene.time.now;e-this.lastStasisTime<this.stasisCooldown||(this.activeStasis&&this.activeStasis.destroy(),this.activeStasis={x:this.x,y:this.y,radius:this.stasisRadius,createdAt:e,destroy:()=>{this.stasisGraphics.clear(),this.activeStasis=null}},this.lastStasisTime=e)}destroy(){this.auraGraphics&&this.auraGraphics.destroy(),this.stasisGraphics&&this.stasisGraphics.destroy(),super.destroy()}updateStasisVisual(){if(this.stasisGraphics&&(this.stasisGraphics.clear(),this.activeStasis)){const e=1-(this.scene.time.now-this.activeStasis.createdAt)/this.stasisDuration;if(e<=0){this.activeStasis.destroy();return}this.stasisGraphics.lineStyle(2,10233776,.5*e),this.stasisGraphics.fillStyle(10233776,.2*e),this.stasisGraphics.strokeCircle(this.activeStasis.x,this.activeStasis.y,this.activeStasis.radius),this.stasisGraphics.fillCircle(this.activeStasis.x,this.activeStasis.y,this.activeStasis.radius)}}update(){const e=this.scene.cursors,t=this.speed;this.body.setVelocity(0);const s=this.scene.wasd;let i=0,a=0;if(e.left.isDown||s.left.isDown?i=-t:(e.right.isDown||s.right.isDown)&&(i=t),e.up.isDown||s.up.isDown?a=-t:(e.down.isDown||s.down.isDown)&&(a=t),i!==0||a!==0){const h=new Phaser.Math.Vector2(i,a).normalize().scale(t);this.body.setVelocity(h.x,h.y)}if(this.hasAura){this.updateAuraVisual();const h=this.scene.time.now;h-this.lastAuraDamageTime>this.auraDamageInterval&&(this.scene.enemies.getChildren().forEach(o=>{Phaser.Math.Distance.Between(this.x,this.y,o.x,o.y)<=this.auraRadius&&o.takeDamage(this.auraDamage)}),this.lastAuraDamageTime=h)}const r=this.scene.time.now;r-this.lastAttackTime>this.attackCooldown&&(this.scene.createProjectile(),this.lastAttackTime=r),this.createStasis(),this.updateStasisVisual(),this.activeStasis&&this.scene.enemies.getChildren().forEach(l=>{l.setTint(16777215);const o=Phaser.Math.Distance.Between(l.x,l.y,this.activeStasis.x,this.activeStasis.y);if(o<=this.activeStasis.radius){l.setTint(10233776);const n=Phaser.Math.Angle.Between(l.x,l.y,this.activeStasis.x,this.activeStasis.y),d=o/this.activeStasis.radius,u=600*Math.pow(1-d,3),c=new Phaser.Math.Vector2;this.scene.physics.velocityFromRotation(n,u,c);const p=new Phaser.Math.Vector2(this.scene.player.x-l.x,this.scene.player.y-l.y).normalize(),f=.3;l.body.velocity.x=l.speed*p.x*f-c.x,l.body.velocity.y=l.speed*p.y*f-c.y}})}}class x extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s,i={}){super(e,t,s,"enemy"),this.scene=e,this.health=i.health||1,this.speed=i.speed||100,this.damage=i.damage||5,this.erraticness=i.erraticness||0,this.speedTooltip=e.add.text(0,0,"",{fontSize:"12px",color:"#ffffff",backgroundColor:"#000000cc",padding:{x:3,y:1},visible:!1,fixedWidth:80,align:"center"}),this.speedTooltip.alpha=0,this.speedTooltip.setDepth(1e3),this.speedTooltipEnabled=!1,e.add.existing(this),e.physics.add.existing(this),this.setCircle(15),this.erraticness>0&&(this.changeDirectionTimer=e.time.addEvent({delay:Phaser.Math.Between(500,2e3),callback:this.randomizeMovement,callbackScope:this,loop:!0}))}randomizeMovement(){if(!this.scene)return;const e=Phaser.Math.Between(-50,50)*this.erraticness,t=Phaser.Math.Between(-50,50)*this.erraticness;this.body.velocity.x+=e,this.body.velocity.y+=t;const s=Math.sqrt(this.body.velocity.x**2+this.body.velocity.y**2);s>this.speed&&(this.body.velocity.x=this.body.velocity.x/s*this.speed,this.body.velocity.y=this.body.velocity.y/s*this.speed)}showDamageNumber(e){const t=this.scene.add.text(this.x,this.y-this.height/2,`-${e}`,{fontSize:"16px",fontStyle:"bold",color:"#ff0000",stroke:"#000000",strokeThickness:2});t.setOrigin(.5),t.setDepth(1e3),this.scene.tweens.add({targets:t,y:t.y-30,alpha:0,duration:1e3,ease:"Cubic.out",onComplete:()=>t.destroy()})}takeDamage(e){return this.health-=e,this.showDamageNumber(e),this.health<=0?(this.changeDirectionTimer&&this.changeDirectionTimer.destroy(),this.speedTooltip&&this.speedTooltip.destroy(),this.destroy(),!0):!1}enableSpeedTooltip(){this.speedTooltipEnabled=!0,this.speedTooltip.alpha=1,this.setInteractive(),this.on("pointerover",this.showSpeedTooltip,this),this.on("pointerout",this.hideSpeedTooltip,this)}disableSpeedTooltip(){this.speedTooltipEnabled=!1,this.removeInteractive(),this.off("pointerover",this.showSpeedTooltip,this),this.off("pointerout",this.hideSpeedTooltip,this),this.speedTooltip&&(this.speedTooltip.setVisible(!1),this.speedTooltip.alpha=0)}showSpeedTooltip(){if(!this.scene||!this.speedTooltipEnabled)return;const e=Math.sqrt(this.body.velocity.x**2+this.body.velocity.y**2).toFixed(0),t=(e/this.speed*100).toFixed(0),s=this.scene.player.activeStasis&&Phaser.Math.Distance.Between(this.x,this.y,this.scene.player.activeStasis.x,this.scene.player.activeStasis.y)<=this.scene.player.stasisRadius;this.speedTooltip.setText(`Spd: ${e}
${t}%`+(s?`
*STASIS*`:"")),this.speedTooltip.setVisible(!0)}hideSpeedTooltip(){this.speedTooltip&&this.speedTooltip.setVisible(!1)}update(){if(!this.scene||!this.scene.player)return;if(!(this.scene.player.activeStasis&&Phaser.Math.Distance.Between(this.x,this.y,this.scene.player.activeStasis.x,this.scene.player.activeStasis.y)<=this.scene.player.stasisRadius)){const t=this.scene.player.x-this.x,s=this.scene.player.y-this.y,i=Math.atan2(s,t);this.scene.physics.velocityFromRotation(i,this.speed,this.body.velocity)}this.speedTooltip&&this.speedTooltip.visible&&(this.speedTooltip.setPosition(this.x-this.speedTooltip.width/2,this.y-this.height-this.speedTooltip.height-5),this.showSpeedTooltip())}}class m extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s){super(e,t,s,"projectile"),this.scene=e,this.speed=300,this.target=null,this.damage=e.player.projectileDamage,e.add.existing(this),e.physics.add.existing(this),this.setCircle(5),this.findTarget(),e.time.delayedCall(2e3,()=>{this.destroy()})}findTarget(){const e=this.scene.enemies.getChildren();if(e.length===0){const a=this.scene.player.body.velocity,r=a.length()>0?Math.atan2(a.y,a.x):0;this.scene.physics.velocityFromRotation(r,this.speed,this.body.velocity);return}let t=e[0],s=Phaser.Math.Distance.Between(this.x,this.y,t.x,t.y);for(let i=1;i<e.length;i++){const a=e[i],r=Phaser.Math.Distance.Between(this.x,this.y,a.x,a.y);r<s&&(s=r,t=a)}this.target=t,this.updateVelocity()}updateVelocity(){if(!this.target||!this.target.active){this.findTarget();return}const e=Phaser.Math.Angle.Between(this.x,this.y,this.target.x,this.target.y);this.scene.physics.velocityFromRotation(e,this.speed,this.body.velocity)}}class S extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s){super(e,t,s,"xporb"),this.scene=e,this.value=10,this.speed=200,this.magnetRadius=100,e.add.existing(this),e.physics.add.existing(this),this.setCircle(8),e.time.delayedCall(1e4,()=>{this.destroy()})}update(){const e=this.scene.player,t=Phaser.Math.Distance.Between(this.x,this.y,e.x,e.y);if(t<=this.magnetRadius+e.level*10){const s=Phaser.Math.Angle.Between(this.x,this.y,e.x,e.y);this.scene.physics.velocityFromRotation(s,this.speed*(1-t/this.magnetRadius),this.body.velocity)}else this.setVelocity(0)}}class b extends Phaser.Scene{constructor(){super("GameScene")}preload(){const e=this.add.graphics();e.clear(),e.fillStyle(6732650),e.fillRect(0,0,32,32),e.fillStyle(5025616),e.fillRect(4,8,2,4),e.fillRect(12,4,2,6),e.fillRect(20,6,2,4),e.fillRect(28,8,2,4),e.generateTexture("grass",32,32),e.clear(),e.fillStyle(14142664),e.fillRect(0,0,32,32),e.fillStyle(12364452);for(let s=0;s<4;s++)for(let i=0;i<4;i++)(s+i)%2===0&&e.fillRect(s*8,i*8,4,4);e.generateTexture("path",32,32),e.clear(),e.fillStyle(7951688),e.fillRect(28,32,8,32),e.fillStyle(3046706),e.fillRect(16,8,32,32),e.fillRect(8,16,48,24),e.fillStyle(3706428),e.fillRect(20,12,8,8),e.fillRect(36,12,8,8),e.fillRect(12,20,8,8),e.fillRect(44,20,8,8),e.generateTexture("tree",64,64),e.clear(),e.fillStyle(5125166),e.fillRect(4,16,4,8),e.fillRect(40,16,4,8),e.fillStyle(7951688),e.fillRect(0,8,48,8),e.fillRect(0,0,48,4),e.fillRect(0,4,4,4),e.fillRect(44,4,4,4),e.generateTexture("bench",48,24),e.clear(),e.fillStyle(3706428),e.fillRect(4,4,24,16),e.fillRect(0,8,32,12),e.fillStyle(4431943),e.fillRect(8,6,6,6),e.fillRect(20,6,6,6),e.generateTexture("bush",32,24),e.destroy();const t=this.add.graphics();t.clear(),t.fillStyle(16766901),t.fillRect(12,8,16,16),t.fillStyle(4863009),t.fillRect(10,4,20,8),t.fillRect(8,8,4,12),t.fillRect(28,8,4,12),t.fillStyle(0),t.fillRect(12,12,6,2),t.fillRect(22,12,6,2),t.fillRect(18,12,4,1),t.fillStyle(4863009),t.fillRect(14,20,12,4),t.fillStyle(3033759),t.fillRect(10,24,20,12),t.fillStyle(13369344),t.fillRect(12,26,2,8),t.fillRect(20,26,2,8),t.fillRect(10,28,20,2),t.fillRect(10,32,20,2),t.generateTexture("player",40,40),t.clear(),t.fillStyle(16739584),t.beginPath(),t.moveTo(15,2),t.lineTo(28,28),t.lineTo(2,28),t.closePath(),t.fill(),t.fillStyle(16777215),t.fillRect(8,10,14,3),t.fillRect(6,16,18,3),t.fillRect(4,22,22,3),t.fillStyle(0),t.fillRect(2,28,26,2),t.lineStyle(1,16754470,.4),t.strokePath(),t.generateTexture("enemy",30,30),t.clear(),t.fillStyle(16761095),t.fillRect(3,3,4,4),t.lineStyle(1,16769154,.6),t.strokeRect(2,2,6,6),t.generateTexture("projectile",10,10),t.clear(),t.fillStyle(13935692),t.beginPath(),t.arc(8,8,7,0,Math.PI*2),t.fill(),t.fillStyle(0),t.beginPath(),t.arc(8,8,2,0,Math.PI*2),t.fill(),t.lineStyle(1,10910781),t.strokeCircle(8,8,7),t.strokeCircle(8,8,2),t.fillStyle(16774112),t.fillRect(8,2,1,1),t.fillRect(6,3,1,1),t.fillRect(10,3,1,1),t.fillRect(13,8,1,1),t.fillRect(12,6,1,1),t.fillRect(8,14,1,1),t.fillRect(6,13,1,1),t.fillRect(10,13,1,1),t.fillRect(3,8,1,1),t.fillRect(4,6,1,1),t.lineStyle(1,16758605,.3),t.strokeCircle(8,8,8),t.generateTexture("xporb",16,16),t.destroy()}createParkBackground(){const e=this.cameras.main.width,t=this.cameras.main.height;for(let h=0;h<e;h+=32)for(let l=0;l<t;l+=32)this.add.image(h,l,"grass").setOrigin(0,0);const s=[{x:0,y:t/2},{x:e/4,y:t/3},{x:e/2,y:t/2},{x:3*e/4,y:2*t/3},{x:e,y:t/2}];for(let h=0;h<s.length-1;h++){const l=s[h],o=s[h+1],n=10;for(let d=0;d<=n;d++){const u=l.x+(o.x-l.x)*(d/n),c=l.y+(o.y-l.y)*(d/n);for(let p=-32;p<=32;p+=32)this.add.image(u+p,c,"path").setOrigin(0,0)}}[{x:100,y:100},{x:e-200,y:150},{x:e/2,y:t-200},{x:150,y:t-150},{x:e-150,y:t-250}].forEach(h=>{this.add.image(h.x,h.y,"tree").setDepth(h.y)}),[{x:e/4,y:t/3+50},{x:3*e/4,y:2*t/3-50}].forEach(h=>{this.add.image(h.x,h.y,"bench").setDepth(h.y)}),[{x:50,y:200},{x:e-80,y:180},{x:e/2-200,y:t-100},{x:e/2+200,y:t-120},{x:120,y:t-80},{x:e-100,y:t-150}].forEach(h=>{this.add.image(h.x,h.y,"bush").setDepth(h.y)})}create(){this.isPaused=!1,this.gameTime=0,this.difficultyLevel=1,this.debugMode=!1,this.showSpeedLabels=!1,this.physicsGroup=this.add.group(),this.createParkBackground(),this.setupDebugConsole(),this.time.addEvent({delay:45e3,callback:this.increaseDifficulty,callbackScope:this,loop:!0}),this.timeText=this.add.text(16,this.cameras.main.height-40,"Time: 0:00",{fontSize:"24px",fill:"#fff"}),this.timeText.setScrollFactor(0),this.time.addEvent({delay:1e3,callback:this.updateGameTime,callbackScope:this,loop:!0}),this.cursors=this.input.keyboard.createCursorKeys(),this.wasd=this.input.keyboard.addKeys({up:Phaser.Input.Keyboard.KeyCodes.W,down:Phaser.Input.Keyboard.KeyCodes.S,left:Phaser.Input.Keyboard.KeyCodes.A,right:Phaser.Input.Keyboard.KeyCodes.D}),this.player=new g(this,this.cameras.main.centerX,this.cameras.main.centerY),this.enemies=this.add.group(),this.projectiles=this.add.group(),this.xporbs=this.add.group(),this.spawner=this.time.addEvent({delay:1e3,callback:this.spawnEnemy,callbackScope:this,loop:!0}),this.physics.add.overlap(this.player,this.enemies,this.handlePlayerEnemyCollision,null,this),this.physics.add.overlap(this.projectiles,this.enemies,this.handleProjectileEnemyCollision,null,this),this.physics.add.overlap(this.player,this.xporbs,this.handlePlayerXPOrbCollision,null,this),this.createUI()}createUI(){const t={fontSize:"24px",fill:"#fff"};this.uiContainer=this.add.container(0,0),this.levelText=this.add.text(20,20,"Level: 1",t);const s=300,i=20,a=20,r=20+30,h=r+i+10;this.healthBarBg=this.add.rectangle(a,h,s,i,3355443),this.healthBarBg.setOrigin(0,0),this.healthBarFill=this.add.rectangle(a,h,s,i,16007990),this.healthBarFill.setOrigin(0,0),this.xpBarBg=this.add.rectangle(a,r,s,i,3355443),this.xpBarBg.setOrigin(0,0),this.xpBarFill=this.add.rectangle(a,r,0,i,2201331),this.xpBarFill.setOrigin(0,0),this.uiContainer.add([this.levelText,this.xpBarBg,this.healthBarBg,this.healthBarFill,this.xpBarFill]),this.uiContainer.setScrollFactor(0)}updateUI(){this.levelText.setText(`Level: ${this.player.level}`);const e=this.player.level*100,t=this.player.displayXP/e;this.xpBarFill.width=this.xpBarBg.width*t;const s=this.player.health/this.player.maxHealth;this.healthBarFill.width=this.healthBarBg.width*s}increaseDifficulty(){this.difficultyLevel++;const e=1/(1+this.difficultyLevel*.1),t=1e3,s=15*e,i=Math.max(600,t-this.difficultyLevel*s);this.spawner&&this.spawner.destroy(),this.spawner=this.time.addEvent({delay:i,callback:this.spawnEnemy,callbackScope:this,loop:!0})}updateGameTime(){this.gameTime++;const e=Math.floor(this.gameTime/60),t=this.gameTime%60;this.timeText.setText(`Time: ${e}:${t.toString().padStart(2,"0")}`)}spawnEnemy(){if(this.isPaused)return;const e=50;let t,s;Phaser.Math.Between(0,1)?(t=Phaser.Math.Between(0,this.cameras.main.width),s=Phaser.Math.Between(0,1)?-e:this.cameras.main.height+e):(t=Phaser.Math.Between(0,1)?-e:this.cameras.main.width+e,s=Phaser.Math.Between(0,this.cameras.main.height));const i=1/(1+this.difficultyLevel*.15),a={health:Math.ceil(1+this.difficultyLevel*.2*i),speed:Math.min(200,100+this.difficultyLevel*3*i),damage:Math.ceil(3+this.difficultyLevel*.15*i),erraticness:Math.min(.3,this.difficultyLevel*.03*i)},r=Math.min(5,1+Math.floor(this.difficultyLevel/3));for(let h=0;h<r;h++){const l=Phaser.Math.Between(-50,50),o=Phaser.Math.Between(-50,50),n=new x(this,t+l,s+o,a);this.showSpeedLabels&&n.enableSpeedTooltip(),this.enemies.add(n)}}createProjectile(){const e=new m(this,this.player.x,this.player.y);this.projectiles.add(e)}handlePlayerEnemyCollision(e,t){t.destroy(),e.takeDamage(10)}handleProjectileEnemyCollision(e,t){if(t.takeDamage(e.damage)){const s=new S(this,t.x,t.y);this.xporbs.add(s)}e.destroy()}handlePlayerXPOrbCollision(e,t){e.gainXP(t.value),t.destroy()}gameOver(){this.scene.pause();const e=this.cameras.main.width,t=this.cameras.main.height;this.add.text(e/2,t/2,`Game Over!
Click to restart`,{fontSize:"48px",fill:"#fff",align:"center"}).setOrigin(.5).setScrollFactor(0),this.input.on("pointerdown",()=>{this.scene.restart()})}showUpgradeOptions(){this.isPaused=!0,this.physics.pause(),this.spawner.paused=!0;let e=[{type:"damage",amount:1,text:"Increase projectile damage by 1"},{type:"attackSpeed",amount:50,text:"Increase attack speed by 10%"},{type:"health",amount:20,text:"Increase max health by 20"},{type:"xpGain",amount:.2,text:"Increase XP gain by 20%"}];this.player.hasAura?e.push({type:"aura",amount:{radius:20},text:"Increase aura radius by 20"},{type:"aura",amount:{damage:1},text:"Increase aura damage by 1"}):e.push({type:"aura",amount:null,text:"Gain Damage Aura"}),this.player.hasStasis?e.push({type:"stasis",amount:{radius:30},text:"Increase stasis radius by 30"},{type:"stasis",amount:{duration:1e3},text:"Increase stasis duration by 1s"}):e.push({type:"stasis",amount:null,text:"Gain Stasis Field"});const t=Phaser.Utils.Array.Shuffle(e.slice()).slice(0,3),s=this.add.rectangle(0,0,this.cameras.main.width,this.cameras.main.height,0,.7);s.setOrigin(0,0),s.setScrollFactor(0);const i=this.cameras.main.width/2,a=this.cameras.main.height/2-100,r=this.add.text(i,a-50,"Level Up!",{fontSize:"32px",fill:"#fff",align:"center"});r.setOrigin(.5),r.setScrollFactor(0),t.forEach((h,l)=>{const o=this.add.rectangle(i,a+l*60,400,50,5025616);o.setScrollFactor(0),o.setInteractive();const n=this.add.text(i,a+l*60,h.text,{fontSize:"20px",fill:"#fff",align:"center"});n.setOrigin(.5),n.setScrollFactor(0),o.on("pointerover",()=>o.setFillStyle(6732650)),o.on("pointerout",()=>o.setFillStyle(5025616)),o.on("pointerdown",()=>{this.player.applyUpgrade(h.type,h.amount),s.destroy(),r.destroy(),t.forEach((d,u)=>{this.children.list.filter(c=>c.y===a+u*60).forEach(c=>c.destroy())})})})}resumeGame(){this.isPaused=!1,this.physics.resume(),this.spawner.paused=!1}setupDebugConsole(){this.consoleBackground=this.add.rectangle(this.cameras.main.width/2,this.cameras.main.height-50,this.cameras.main.width,40,0,.8),this.consoleBackground.setDepth(999),this.consoleBackground.setScrollFactor(0),this.consoleBackground.setOrigin(.5),this.consoleBackground.visible=!1,this.consoleIndicator=this.add.text(10,this.cameras.main.height-70,"-- CONSOLE ACTIVE --",{fontSize:"14px",fill:"#ffeb3b",backgroundColor:"#000000cc",padding:{x:6,y:4}}),this.consoleIndicator.setDepth(1e3),this.consoleIndicator.setScrollFactor(0),this.consoleIndicator.visible=!1;const e={fontSize:"16px",fill:"#fff",padding:{x:10,y:5}};this.consoleInput=this.add.text(10,this.cameras.main.height-50,"> ",e),this.consoleInput.setDepth(1e3),this.consoleInput.setScrollFactor(0),this.consoleInput.visible=!1,this.commandAliases={lu:"levelup",aa:"addaura",as:"addstasis",ls:"l_speed",h:"help"},this.debugCommands={levelup:()=>{this.player.gainXP(this.player.level*100)},addaura:()=>{this.player.hasAura=!0,console.log("Aura weapon added")},addstasis:()=>{this.player.hasStasis=!0,console.log("Stasis weapon added")},l_speed:()=>{this.showSpeedLabels=!this.showSpeedLabels,this.enemies.getChildren().forEach(t=>{this.showSpeedLabels?t.enableSpeedTooltip():t.disableSpeedTooltip()}),console.log(this.showSpeedLabels?"Speed labels enabled":"Speed labels disabled")},help:()=>{console.log(`Available commands:
levelup (lu) - Level up the player
addaura - Add aura weapon
addstasis - Add stasis weapon
l_speed - Toggle speed labels
help - Show this help message`)}},this.input.keyboard.on("keydown-FORWARD_SLASH",t=>{t.preventDefault(),this.debugMode=!this.debugMode,this.consoleInput.visible=this.debugMode,this.debugMode?(this.consoleInput.setText("> "),this.consoleInput.visible=!0,this.consoleBackground.visible=!0,this.consoleIndicator.visible=!0,this.isPaused=!0,this.physics.pause(),this.time.paused=!0,this.spawner.paused=!0):(this.consoleInput.visible=!1,this.consoleBackground.visible=!1,this.consoleIndicator.visible=!1,this.isPaused=!1,this.physics.resume(),this.time.paused=!1,this.spawner.paused=!1)}),this.input.keyboard.on("keydown",t=>{if(this.debugMode)if(t.key==="Enter"){let s=this.consoleInput.text.substring(2).trim().toLowerCase();if(s.startsWith("/")&&(s=s.slice(1)),this.commandAliases[s]&&(s=this.commandAliases[s]),this.debugCommands[s]){const i=this.isPaused;this.isPaused=!1,this.physics.resume(),this.time.paused=!1,this.spawner.paused=!1,this.debugCommands[s](),i&&(this.isPaused=!0,this.physics.pause(),this.time.paused=!0,this.spawner.paused=!0)}else console.log('Unknown command. Type "help" for available commands');this.consoleInput.setText("> ")}else t.key==="Backspace"?this.consoleInput.text.length>2&&this.consoleInput.setText(this.consoleInput.text.slice(0,-1)):t.key.length===1&&this.consoleInput.setText(this.consoleInput.text+t.key)})}update(){this.isPaused||(this.player.update(),this.enemies.getChildren().forEach(e=>e.update()),this.player.updateDisplayXP(),this.updateUI())}}const v={type:Phaser.AUTO,parent:"game",width:window.innerWidth-40,height:window.innerHeight-40,physics:{default:"arcade",arcade:{debug:!1}},scene:b},w=new Phaser.Game(v);window.addEventListener("resize",()=>{w.scale.resize(window.innerWidth-40,window.innerHeight-40)});
